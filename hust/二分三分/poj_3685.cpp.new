/*
  二分三分  二分答案  两次二分  经典题  好题
  题意：Given a N × N matrix A, whose element in the i-th row and j-th column Aij is an
        number that equals i^2 + 100000 × i + j^2 - 100000 × j + i × j, you are to find the
        M-th smallest element in the matrix.

  思路：竟然是二分答案，太神奇了
        容易看出来{Aij}按行递增，列是个凸函数(二次函数)
        二分答案，再求每一列上有多少个数小于等于该解，而根据列递增我们又可以来一次二分
        两次二分，所以复杂度O(logn * n * logn)
        算每一列小于等于该解的办法还可以用一元二次不等式来搞。

  扩展：现在给的式子是f(i, C)递增，f(C, j)凸函数，那要是给的式子f(i, C)也是凸函数呢？
        还是可以用二分答案 + 枚举列，但算每一列小于该解的数目就只能用解二次不等式搞了，不能
        再二分了。
  3204ms，挺慢，long long计算太多，可以常数级优化一下
*/
#include <stdio.h>
long long M, N;
long long calc(long long col, long long x)
{
  long long tmp1 = (100000+col), tmp2 = (col*col-100000*col);
  long long r = N, l = 1, mid, ans = 0;
  while(l <= r) {
    mid = (l + r) / 2;
    if( mid*mid + tmp1*mid + tmp2 <= x )
      ans = mid, l = mid + 1;
    else r = mid - 1;
  }
  return ans;
}
bool check(long long x)
{
  long long sum = 0;
  for(int col = 1; col <= N; col++) sum += calc((long long)col, x);
  return sum >= M;
}
int main()
{
  freopen("in.txt","r",stdin);
  int cases;
  scanf("%d", &cases);
  while(cases--) {
    scanf("%I64d%I64d", &N, &M);
    long long r = (1LL << 62), l = -(1LL << 62), ans, mid;
    while(l <= r) {
      mid = (l + r) / 2;
      if(check(mid)) ans = mid, r = mid - 1;
      else l = mid + 1;
    }
    printf("%I64d\n", ans);
  }
  return 0;
}
