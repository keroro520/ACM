#include <stdio.h>
#include <algorithm>
#include <math.h>
using namespace std;
#define MAXN 10005
typedef long long ll;
class Point {
  public : int x, y;
  Point () {}
  Point (int x, int y) : x(x), y(y) {}
  bool operator < (const Point &b) const {
    return x < b.x;
  }
} a[MAXN];
int n, S, K, D;
double _dis(const Point &a, const Point &b) {
  return sqrt((a.x-b.x)*1.0*(a.x-b.x) + (a.y-b.y)*1.0*(a.y-b.y));
}
Point Find(const Point &a, int M)
{
  return Point(a.x + (int)sqrt((double)D*D - (ll)(a.y+M)*(a.y+M)), -M);
}
bool check(int M)
{
  int i = 1, j = 1;
  while(i <= n && j <= S) {
    Point p = Find(a[i], M);
    for(; i <= n; i++) if(_dis(a[i], p) > M) break;
    j++;
  }
  return i > n;
}
int main()
{
  freopen("in.txt","r",stdin);
  int cases, Cas = 0;
  scanf("%d", &cases);
  while(cases--) {
    scanf("%d%d%d%d", &K, &n, &S, &D);
    int r = 999999999, l = 0, mid, ans = 0, flag = true;
    for(int i = 1; i < n; i++) {
      scanf("%d%d", &a[i].x, &a[i].y); a[i].y -= K;
      if(a[i].y > D) flag = false;
      else r = min(r, D-a[i].y);
    }
    if(!flag) { puts("impossible"); continue; }
    sort(a, a+n);
    while(l <= r) {
      mid = (l + r) >> 1;
      if(check(mid)) ans = mid, l = mid + 1;
      else r = mid - 1;
    }
    printf("Case %d: %d\n", ++Cas, ans);
  }
  return 0;
}
